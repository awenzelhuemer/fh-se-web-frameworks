{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, Directive, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n/**\n * The accessor for writing a date object value and listening to changes on a date input element.\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsDate>`\n */\n\nclass DateValueAccessor {\n  constructor(renderer, elementRef) {\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n\n    this.onChange = _ => {};\n\n    this.onTouched = () => {};\n  }\n\n  writeValue(date) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', date);\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n}\n\nDateValueAccessor.ɵfac = function DateValueAccessor_Factory(t) {\n  return new (t || DateValueAccessor)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nDateValueAccessor.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DateValueAccessor,\n  selectors: [[\"\", \"useValueAsDate\", \"\"]],\n  hostBindings: function DateValueAccessor_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function DateValueAccessor_input_HostBindingHandler($event) {\n        return ctx.onChange($event.target.valueAsDate);\n      })(\"blur\", function DateValueAccessor_blur_HostBindingHandler() {\n        return ctx.onTouched();\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => DateValueAccessor),\n    multi: true\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DateValueAccessor, [{\n    type: Directive,\n    args: [{\n      selector: '[useValueAsDate]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => DateValueAccessor),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    onChange: [{\n      type: HostListener,\n      args: ['input', ['$event.target.valueAsDate']]\n    }],\n    onTouched: [{\n      type: HostListener,\n      args: ['blur', []]\n    }]\n  });\n})();\n\nclass DateValueAccessorModule {}\n\nDateValueAccessorModule.ɵfac = function DateValueAccessorModule_Factory(t) {\n  return new (t || DateValueAccessorModule)();\n};\n\nDateValueAccessorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DateValueAccessorModule\n});\nDateValueAccessorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DateValueAccessorModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [DateValueAccessor],\n      exports: [DateValueAccessor]\n    }]\n  }], null, null);\n})();\n/**\n * The accessor for writing a value and listening to changes on a date input element in local time.\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsLocalDate>`\n *\n * See also:\n * What is the correct way to set and get HTMLInputElement.valueAsDate using local Dates?\n * https://stackoverflow.com/a/53033442\n */\n\n\nclass LocalDateValueAccessor {\n  constructor(renderer, elementRef) {\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n\n    this.onInput = date => {\n      // convert to LOCAL Date, time is set to 00:00 in LOCAL time\n      const localDate = date ? new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()) : null;\n      this.onChange(localDate);\n    };\n\n    this.onChange = () => {};\n\n    this.onTouched = () => {};\n  }\n\n  writeValue(date) {\n    // convert to UTC Date, time is set to 00:00 in UTC time\n    const utcDate = date ? new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) : null;\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n}\n\nLocalDateValueAccessor.ɵfac = function LocalDateValueAccessor_Factory(t) {\n  return new (t || LocalDateValueAccessor)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nLocalDateValueAccessor.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LocalDateValueAccessor,\n  selectors: [[\"\", \"useValueAsLocalDate\", \"\"]],\n  hostBindings: function LocalDateValueAccessor_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function LocalDateValueAccessor_input_HostBindingHandler($event) {\n        return ctx.onInput($event.target.valueAsDate);\n      })(\"blur\", function LocalDateValueAccessor_blur_HostBindingHandler() {\n        return ctx.onTouched();\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => LocalDateValueAccessor),\n    multi: true\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalDateValueAccessor, [{\n    type: Directive,\n    args: [{\n      selector: '[useValueAsLocalDate]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => LocalDateValueAccessor),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event.target.valueAsDate']]\n    }],\n    onTouched: [{\n      type: HostListener,\n      args: ['blur', []]\n    }]\n  });\n})();\n\nclass LocalDateValueAccessorModule {}\n\nLocalDateValueAccessorModule.ɵfac = function LocalDateValueAccessorModule_Factory(t) {\n  return new (t || LocalDateValueAccessorModule)();\n};\n\nLocalDateValueAccessorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LocalDateValueAccessorModule\n});\nLocalDateValueAccessorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalDateValueAccessorModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LocalDateValueAccessor],\n      exports: [LocalDateValueAccessor]\n    }]\n  }], null, null);\n})();\n/**\n * The accessor for writing an iso-formatted string value and listening to changes on a date input element.\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsIso>`\n */\n\n\nclass IsoDateValueAccessor {\n  constructor(renderer, elementRef) {\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n\n    this.onInput = date => {\n      const isoString = date ? date.toISOString() : null;\n      this.onChange(isoString);\n    };\n\n    this.onChange = () => {};\n\n    this.onTouched = () => {};\n  }\n\n  writeValue(isoString) {\n    const date = isoString ? new Date(isoString) : null;\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', date);\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n}\n\nIsoDateValueAccessor.ɵfac = function IsoDateValueAccessor_Factory(t) {\n  return new (t || IsoDateValueAccessor)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nIsoDateValueAccessor.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: IsoDateValueAccessor,\n  selectors: [[\"\", \"useValueAsIso\", \"\"]],\n  hostBindings: function IsoDateValueAccessor_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function IsoDateValueAccessor_input_HostBindingHandler($event) {\n        return ctx.onInput($event.target.valueAsDate);\n      })(\"blur\", function IsoDateValueAccessor_blur_HostBindingHandler() {\n        return ctx.onTouched();\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => IsoDateValueAccessor),\n    multi: true\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IsoDateValueAccessor, [{\n    type: Directive,\n    args: [{\n      selector: '[useValueAsIso]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => IsoDateValueAccessor),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event.target.valueAsDate']]\n    }],\n    onTouched: [{\n      type: HostListener,\n      args: ['blur', []]\n    }]\n  });\n})();\n\nclass IsoDateValueAccessorModule {}\n\nIsoDateValueAccessorModule.ɵfac = function IsoDateValueAccessorModule_Factory(t) {\n  return new (t || IsoDateValueAccessorModule)();\n};\n\nIsoDateValueAccessorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: IsoDateValueAccessorModule\n});\nIsoDateValueAccessorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IsoDateValueAccessorModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [IsoDateValueAccessor],\n      exports: [IsoDateValueAccessor]\n    }]\n  }], null, null);\n})();\n/**\n * The accessor for writing an iso-formatted string and listening to changes on a date input element.\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsLocalIso>`\n *\n * See also:\n * What is the correct way to set and get HTMLInputElement.valueAsDate using local Dates?\n * https://stackoverflow.com/a/53033442\n */\n\n\nclass LocalIsoDateValueAccessor {\n  constructor(renderer, elementRef) {\n    this.renderer = renderer;\n    this.elementRef = elementRef;\n\n    this.onInput = date => {\n      // convert to LOCAL Date, time is set to 00:00 in LOCAL time\n      const localDate = date ? new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()) : null;\n      const isoString = localDate ? localDate.toISOString() : null;\n      this.onChange(isoString);\n    };\n\n    this.onChange = () => {};\n\n    this.onTouched = () => {};\n  }\n\n  writeValue(isoString) {\n    const date = isoString ? new Date(isoString) : null; // convert to UTC Date, time is set to 00:00 in UTC time\n\n    const utcDate = date ? new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) : null;\n    this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n}\n\nLocalIsoDateValueAccessor.ɵfac = function LocalIsoDateValueAccessor_Factory(t) {\n  return new (t || LocalIsoDateValueAccessor)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nLocalIsoDateValueAccessor.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LocalIsoDateValueAccessor,\n  selectors: [[\"\", \"useValueAsLocalIso\", \"\"]],\n  hostBindings: function LocalIsoDateValueAccessor_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"input\", function LocalIsoDateValueAccessor_input_HostBindingHandler($event) {\n        return ctx.onInput($event.target.valueAsDate);\n      })(\"blur\", function LocalIsoDateValueAccessor_blur_HostBindingHandler() {\n        return ctx.onTouched();\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => LocalIsoDateValueAccessor),\n    multi: true\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalIsoDateValueAccessor, [{\n    type: Directive,\n    args: [{\n      selector: '[useValueAsLocalIso]',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => LocalIsoDateValueAccessor),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    onInput: [{\n      type: HostListener,\n      args: ['input', ['$event.target.valueAsDate']]\n    }],\n    onTouched: [{\n      type: HostListener,\n      args: ['blur', []]\n    }]\n  });\n})();\n\nclass LocalIsoDateValueAccessorModule {}\n\nLocalIsoDateValueAccessorModule.ɵfac = function LocalIsoDateValueAccessorModule_Factory(t) {\n  return new (t || LocalIsoDateValueAccessorModule)();\n};\n\nLocalIsoDateValueAccessorModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LocalIsoDateValueAccessorModule\n});\nLocalIsoDateValueAccessorModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LocalIsoDateValueAccessorModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [LocalIsoDateValueAccessor],\n      exports: [LocalIsoDateValueAccessor]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of the date-value-accessor\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DateValueAccessor, DateValueAccessorModule, IsoDateValueAccessor, IsoDateValueAccessorModule, LocalDateValueAccessor, LocalDateValueAccessorModule, LocalIsoDateValueAccessor, LocalIsoDateValueAccessorModule };","map":{"version":3,"sources":["C:/Users/Andi/Documents/GitHub/fh-se-web-frameworks/Ue02/BookShop/node_modules/angular-date-value-accessor/fesm2020/angular-date-value-accessor.mjs"],"names":["i0","forwardRef","Directive","HostListener","NgModule","NG_VALUE_ACCESSOR","DateValueAccessor","constructor","renderer","elementRef","onChange","_","onTouched","writeValue","date","setProperty","nativeElement","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","Renderer2","ElementRef","ɵdir","provide","useExisting","multi","type","args","selector","providers","DateValueAccessorModule","ɵmod","ɵinj","declarations","exports","LocalDateValueAccessor","onInput","localDate","Date","getUTCFullYear","getUTCMonth","getUTCDate","utcDate","UTC","getFullYear","getMonth","getDate","LocalDateValueAccessorModule","IsoDateValueAccessor","isoString","toISOString","IsoDateValueAccessorModule","LocalIsoDateValueAccessor","LocalIsoDateValueAccessorModule"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { forwardRef, Directive, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\n/**\n * The accessor for writing a date object value and listening to changes on a date input element.\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsDate>`\n */\nclass DateValueAccessor {\n    constructor(renderer, elementRef) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n    }\n    writeValue(date) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', date);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nDateValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DateValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nDateValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.2\", type: DateValueAccessor, selector: \"[useValueAsDate]\", host: { listeners: { \"input\": \"onChange($event.target.valueAsDate)\", \"blur\": \"onTouched()\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => DateValueAccessor),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DateValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[useValueAsDate]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => DateValueAccessor),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { onChange: [{\n                type: HostListener,\n                args: ['input', ['$event.target.valueAsDate']]\n            }], onTouched: [{\n                type: HostListener,\n                args: ['blur', []]\n            }] } });\n\nclass DateValueAccessorModule {\n}\nDateValueAccessorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DateValueAccessorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDateValueAccessorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DateValueAccessorModule, declarations: [DateValueAccessor], exports: [DateValueAccessor] });\nDateValueAccessorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DateValueAccessorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: DateValueAccessorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [DateValueAccessor],\n                    exports: [DateValueAccessor]\n                }]\n        }] });\n\n/**\n * The accessor for writing a value and listening to changes on a date input element in local time.\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsLocalDate>`\n *\n * See also:\n * What is the correct way to set and get HTMLInputElement.valueAsDate using local Dates?\n * https://stackoverflow.com/a/53033442\n */\nclass LocalDateValueAccessor {\n    constructor(renderer, elementRef) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.onInput = (date) => {\n            // convert to LOCAL Date, time is set to 00:00 in LOCAL time\n            const localDate = date ? new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()) : null;\n            this.onChange(localDate);\n        };\n        this.onChange = () => { };\n        this.onTouched = () => { };\n    }\n    writeValue(date) {\n        // convert to UTC Date, time is set to 00:00 in UTC time\n        const utcDate = date ? new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) : null;\n        this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nLocalDateValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalDateValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nLocalDateValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.2\", type: LocalDateValueAccessor, selector: \"[useValueAsLocalDate]\", host: { listeners: { \"input\": \"onInput($event.target.valueAsDate)\", \"blur\": \"onTouched()\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => LocalDateValueAccessor),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalDateValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[useValueAsLocalDate]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => LocalDateValueAccessor),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { onInput: [{\n                type: HostListener,\n                args: ['input', ['$event.target.valueAsDate']]\n            }], onTouched: [{\n                type: HostListener,\n                args: ['blur', []]\n            }] } });\n\nclass LocalDateValueAccessorModule {\n}\nLocalDateValueAccessorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalDateValueAccessorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLocalDateValueAccessorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalDateValueAccessorModule, declarations: [LocalDateValueAccessor], exports: [LocalDateValueAccessor] });\nLocalDateValueAccessorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalDateValueAccessorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalDateValueAccessorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [LocalDateValueAccessor],\n                    exports: [LocalDateValueAccessor]\n                }]\n        }] });\n\n/**\n * The accessor for writing an iso-formatted string value and listening to changes on a date input element.\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsIso>`\n */\nclass IsoDateValueAccessor {\n    constructor(renderer, elementRef) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.onInput = (date) => {\n            const isoString = date ? date.toISOString() : null;\n            this.onChange(isoString);\n        };\n        this.onChange = () => { };\n        this.onTouched = () => { };\n    }\n    writeValue(isoString) {\n        const date = isoString ? new Date(isoString) : null;\n        this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', date);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nIsoDateValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: IsoDateValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nIsoDateValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.2\", type: IsoDateValueAccessor, selector: \"[useValueAsIso]\", host: { listeners: { \"input\": \"onInput($event.target.valueAsDate)\", \"blur\": \"onTouched()\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => IsoDateValueAccessor),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: IsoDateValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[useValueAsIso]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => IsoDateValueAccessor),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { onInput: [{\n                type: HostListener,\n                args: ['input', ['$event.target.valueAsDate']]\n            }], onTouched: [{\n                type: HostListener,\n                args: ['blur', []]\n            }] } });\n\nclass IsoDateValueAccessorModule {\n}\nIsoDateValueAccessorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: IsoDateValueAccessorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nIsoDateValueAccessorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: IsoDateValueAccessorModule, declarations: [IsoDateValueAccessor], exports: [IsoDateValueAccessor] });\nIsoDateValueAccessorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: IsoDateValueAccessorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: IsoDateValueAccessorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [IsoDateValueAccessor],\n                    exports: [IsoDateValueAccessor]\n                }]\n        }] });\n\n/**\n * The accessor for writing an iso-formatted string and listening to changes on a date input element.\n *\n *  ### Example\n *  `<input type=\"date\" name=\"myBirthday\" ngModel useValueAsLocalIso>`\n *\n * See also:\n * What is the correct way to set and get HTMLInputElement.valueAsDate using local Dates?\n * https://stackoverflow.com/a/53033442\n */\nclass LocalIsoDateValueAccessor {\n    constructor(renderer, elementRef) {\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.onInput = (date) => {\n            // convert to LOCAL Date, time is set to 00:00 in LOCAL time\n            const localDate = date ? new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate()) : null;\n            const isoString = localDate ? localDate.toISOString() : null;\n            this.onChange(isoString);\n        };\n        this.onChange = () => { };\n        this.onTouched = () => { };\n    }\n    writeValue(isoString) {\n        const date = isoString ? new Date(isoString) : null;\n        // convert to UTC Date, time is set to 00:00 in UTC time\n        const utcDate = date ? new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())) : null;\n        this.renderer.setProperty(this.elementRef.nativeElement, 'valueAsDate', utcDate);\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n    }\n}\nLocalIsoDateValueAccessor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalIsoDateValueAccessor, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nLocalIsoDateValueAccessor.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.2\", type: LocalIsoDateValueAccessor, selector: \"[useValueAsLocalIso]\", host: { listeners: { \"input\": \"onInput($event.target.valueAsDate)\", \"blur\": \"onTouched()\" } }, providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => LocalIsoDateValueAccessor),\n            multi: true\n        }\n    ], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalIsoDateValueAccessor, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[useValueAsLocalIso]',\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => LocalIsoDateValueAccessor),\n                            multi: true\n                        }\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { onInput: [{\n                type: HostListener,\n                args: ['input', ['$event.target.valueAsDate']]\n            }], onTouched: [{\n                type: HostListener,\n                args: ['blur', []]\n            }] } });\n\nclass LocalIsoDateValueAccessorModule {\n}\nLocalIsoDateValueAccessorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalIsoDateValueAccessorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLocalIsoDateValueAccessorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalIsoDateValueAccessorModule, declarations: [LocalIsoDateValueAccessor], exports: [LocalIsoDateValueAccessor] });\nLocalIsoDateValueAccessorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalIsoDateValueAccessorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: LocalIsoDateValueAccessorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [LocalIsoDateValueAccessor],\n                    exports: [LocalIsoDateValueAccessor]\n                }]\n        }] });\n\n/*\n * Public API Surface of the date-value-accessor\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DateValueAccessor, DateValueAccessorModule, IsoDateValueAccessor, IsoDateValueAccessorModule, LocalDateValueAccessor, LocalDateValueAccessorModule, LocalIsoDateValueAccessor, LocalIsoDateValueAccessorModule };\n"]},"metadata":{},"sourceType":"module"}